#!/usr/bin/env pwsh

<#
.SYNOPSIS
    Validation script for SingleVault CSV output structure
.DESCRIPTION
    This script validates that the SingleVault mode CSV output contains all expected columns
    and that diagnostic settings data is properly populated when available.
.PARAMETER CsvPath
    Path to the CSV file generated by SingleVault mode
.EXAMPLE
    ./Validate-SingleVaultOutput.ps1 -CsvPath "KeyVaultSingleVault_TestVault_20241215-120000.csv"
#>

param(
    [Parameter(Mandatory = $true)]
    [string]$CsvPath
)

Write-Host "üîç Validating SingleVault CSV Output Structure..." -ForegroundColor Cyan
Write-Host "File: $CsvPath" -ForegroundColor Gray

# Check if file exists
if (-not (Test-Path $CsvPath)) {
    Write-Host "‚ùå CSV file not found: $CsvPath" -ForegroundColor Red
    exit 1
}

# Import CSV data
try {
    $csvData = Import-Csv -Path $CsvPath
    Write-Host "‚úÖ CSV file imported successfully" -ForegroundColor Green
    Write-Host "   Records: $($csvData.Count)" -ForegroundColor Gray
} catch {
    Write-Host "‚ùå Failed to import CSV: $_" -ForegroundColor Red
    exit 1
}

# Define expected columns based on the enhanced SingleVault structure
$expectedColumns = @(
    # Basic Information
    'SubscriptionId', 'SubscriptionName', 'KeyVaultName', 'ResourceId', 'Location', 'ResourceGroupName',
    
    # Diagnostic Settings
    'DiagnosticsEnabled', 'EnabledLogCategories', 'EnabledMetricCategories',
    'LogAnalyticsEnabled', 'LogAnalyticsWorkspaceName',
    'EventHubEnabled', 'EventHubNamespace', 'EventHubName',
    'StorageAccountEnabled', 'StorageAccountName',
    
    # Access Control
    'AccessPolicyCount', 'AccessPolicyDetails', 
    'RBACAssignmentCount', 'RBACRoleAssignments', 'TotalIdentitiesWithAccess',
    'ServicePrincipalCount', 'UserCount', 'GroupCount', 'ManagedIdentityCount',
    'ServicePrincipalDetails', 'ManagedIdentityDetails',
    
    # Security Configuration  
    'SoftDeleteEnabled', 'PurgeProtectionEnabled',
    'PublicNetworkAccess', 'NetworkAclsConfigured', 'PrivateEndpointCount',
    'SystemAssignedIdentity', 'SystemAssignedPrincipalId',
    'UserAssignedIdentityCount', 'UserAssignedIdentityIds', 'ConnectedManagedIdentityCount',
    
    # Compliance Analysis
    'ComplianceStatus', 'ComplianceScore', 'CompanyComplianceScore', 'CompanyComplianceStatus',
    'ComplianceIssues', 'ComplianceRecommendations', 'VaultRecommendations', 
    'SecurityEnhancements', 'RBACRecommendations', 'OverPrivilegedAssignments',
    
    # Workload Analysis
    'SecretCount', 'KeyCount', 'CertificateCount', 'WorkloadCategories',
    'EnvironmentType', 'PrimaryWorkload', 'SecurityInsights', 'OptimizationRecommendations',
    'TotalItems', 'LastAuditDate', 'ErrorsEncountered'
)

Write-Host ""
Write-Host "üìã COLUMN STRUCTURE VALIDATION:" -ForegroundColor Yellow

# Get actual columns from CSV
$actualColumns = $csvData[0].PSObject.Properties.Name
$missingColumns = @()
$extraColumns = @()

# Check for missing columns
foreach ($expectedCol in $expectedColumns) {
    if ($expectedCol -notin $actualColumns) {
        $missingColumns += $expectedCol
    }
}

# Check for extra columns (not necessarily bad, but worth noting)
foreach ($actualCol in $actualColumns) {
    if ($actualCol -notin $expectedColumns) {
        $extraColumns += $actualCol
    }
}

# Report results
if ($missingColumns.Count -eq 0) {
    Write-Host "‚úÖ All expected columns present ($($expectedColumns.Count) columns)" -ForegroundColor Green
} else {
    Write-Host "‚ùå Missing columns ($($missingColumns.Count)):" -ForegroundColor Red
    $missingColumns | ForEach-Object { Write-Host "   - $_" -ForegroundColor Red }
}

if ($extraColumns.Count -gt 0) {
    Write-Host "‚ÑπÔ∏è Extra columns found ($($extraColumns.Count)):" -ForegroundColor Blue
    $extraColumns | ForEach-Object { Write-Host "   + $_" -ForegroundColor Blue }
}

Write-Host ""
Write-Host "üìä DATA VALIDATION:" -ForegroundColor Yellow

# Validate data for the first (and likely only) record
$record = $csvData[0]

# Basic Information Validation
$basicInfoErrors = @()
if ([string]::IsNullOrWhiteSpace($record.KeyVaultName)) { $basicInfoErrors += "KeyVaultName is empty" }
if ([string]::IsNullOrWhiteSpace($record.SubscriptionId)) { $basicInfoErrors += "SubscriptionId is empty" }
if ([string]::IsNullOrWhiteSpace($record.ResourceId)) { $basicInfoErrors += "ResourceId is empty" }

if ($basicInfoErrors.Count -eq 0) {
    Write-Host "‚úÖ Basic information fields populated" -ForegroundColor Green
} else {
    Write-Host "‚ùå Basic information issues:" -ForegroundColor Red
    $basicInfoErrors | ForEach-Object { Write-Host "   - $_" -ForegroundColor Red }
}

# Diagnostic Settings Validation
Write-Host ""
Write-Host "üî¨ Diagnostic Settings Analysis:" -ForegroundColor Cyan

$diagEnabled = $record.DiagnosticsEnabled -eq "True"
Write-Host "   Diagnostics Enabled: $($record.DiagnosticsEnabled)" -ForegroundColor $(if ($diagEnabled) { 'Green' } else { 'Yellow' })

if ($diagEnabled) {
    # If diagnostics are enabled, check for proper data population
    $logAnalyticsEnabled = $record.LogAnalyticsEnabled -eq "True"
    $eventHubEnabled = $record.EventHubEnabled -eq "True"  
    $storageEnabled = $record.StorageAccountEnabled -eq "True"
    
    Write-Host "   Log Analytics: $($record.LogAnalyticsEnabled)" -ForegroundColor $(if ($logAnalyticsEnabled) { 'Green' } else { 'Gray' })
    if ($logAnalyticsEnabled -and [string]::IsNullOrWhiteSpace($record.LogAnalyticsWorkspaceName)) {
        Write-Host "   ‚ö†Ô∏è Log Analytics enabled but workspace name is blank" -ForegroundColor Yellow
    }
    
    Write-Host "   Event Hub: $($record.EventHubEnabled)" -ForegroundColor $(if ($eventHubEnabled) { 'Green' } else { 'Gray' })
    if ($eventHubEnabled -and [string]::IsNullOrWhiteSpace($record.EventHubNamespace)) {
        Write-Host "   ‚ö†Ô∏è Event Hub enabled but namespace is blank" -ForegroundColor Yellow
    }
    
    Write-Host "   Storage Account: $($record.StorageAccountEnabled)" -ForegroundColor $(if ($storageEnabled) { 'Green' } else { 'Gray' })
    if ($storageEnabled -and [string]::IsNullOrWhiteSpace($record.StorageAccountName)) {
        Write-Host "   ‚ö†Ô∏è Storage Account enabled but name is blank" -ForegroundColor Yellow
    }
    
    # Check log categories
    if (-not [string]::IsNullOrWhiteSpace($record.EnabledLogCategories)) {
        $logCategories = $record.EnabledLogCategories.Split(',').Count
        Write-Host "   Log Categories: $logCategories enabled" -ForegroundColor Green
    } else {
        Write-Host "   ‚ö†Ô∏è Diagnostics enabled but no log categories found" -ForegroundColor Yellow
    }
} else {
    Write-Host "   ‚ÑπÔ∏è Diagnostics not enabled - blank destination fields expected" -ForegroundColor Gray
}

# Compliance Analysis Validation
Write-Host ""
Write-Host "üèÜ Compliance Analysis:" -ForegroundColor Cyan

if (-not [string]::IsNullOrWhiteSpace($record.ComplianceScore)) {
    $msScore = [int]$record.ComplianceScore
    $companyScore = if ($record.CompanyComplianceScore) { [int]$record.CompanyComplianceScore } else { 0 }
    
    Write-Host "   Microsoft Framework: $msScore% ($($record.ComplianceStatus))" -ForegroundColor $(if ($msScore -ge 80) { 'Green' } elseif ($msScore -ge 60) { 'Yellow' } else { 'Red' })
    Write-Host "   Company Framework: $companyScore% ($($record.CompanyComplianceStatus))" -ForegroundColor $(if ($companyScore -ge 80) { 'Green' } elseif ($companyScore -ge 60) { 'Yellow' } else { 'Red' })
} else {
    Write-Host "   ‚ùå Compliance scores missing" -ForegroundColor Red
}

# Workload Analysis Validation
Write-Host ""
Write-Host "üì¶ Workload Analysis:" -ForegroundColor Cyan

$secretCount = if ($record.SecretCount) { [int]$record.SecretCount } else { 0 }
$keyCount = if ($record.KeyCount) { [int]$record.KeyCount } else { 0 }
$certCount = if ($record.CertificateCount) { [int]$record.CertificateCount } else { 0 }
$totalItems = $secretCount + $keyCount + $certCount

Write-Host "   Secrets: $secretCount, Keys: $keyCount, Certificates: $certCount" -ForegroundColor Gray
Write-Host "   Total Items: $totalItems" -ForegroundColor Gray
Write-Host "   Environment Type: $($record.EnvironmentType)" -ForegroundColor Gray

# Access Control Validation  
Write-Host ""
Write-Host "üîê Access Control:" -ForegroundColor Cyan

$rbacCount = if ($record.RBACAssignmentCount) { [int]$record.RBACAssignmentCount } else { 0 }
$policyCount = if ($record.AccessPolicyCount) { [int]$record.AccessPolicyCount } else { 0 }
$totalAccess = if ($record.TotalIdentitiesWithAccess) { [int]$record.TotalIdentitiesWithAccess } else { 0 }

Write-Host "   RBAC Assignments: $rbacCount" -ForegroundColor Gray
Write-Host "   Access Policies: $policyCount" -ForegroundColor Gray
Write-Host "   Total Identities: $totalAccess" -ForegroundColor Gray

# Summary
Write-Host ""
Write-Host "üìã VALIDATION SUMMARY:" -ForegroundColor Yellow

$issues = @()
if ($missingColumns.Count -gt 0) { $issues += "$($missingColumns.Count) missing columns" }
if ($basicInfoErrors.Count -gt 0) { $issues += "$($basicInfoErrors.Count) basic info errors" }

if ($issues.Count -eq 0) {
    Write-Host "‚úÖ SingleVault CSV output validation PASSED" -ForegroundColor Green
    Write-Host "   All expected columns present and data appears properly structured" -ForegroundColor Green
} else {
    Write-Host "‚ùå SingleVault CSV output validation FAILED" -ForegroundColor Red
    $issues | ForEach-Object { Write-Host "   - $_" -ForegroundColor Red }
}

Write-Host ""
Write-Host "üìÑ File Details:" -ForegroundColor Gray
Write-Host "   Path: $CsvPath" -ForegroundColor Gray
Write-Host "   Size: $([math]::Round((Get-Item $CsvPath).Length / 1KB, 2)) KB" -ForegroundColor Gray
Write-Host "   Columns: $($actualColumns.Count)" -ForegroundColor Gray
Write-Host "   Records: $($csvData.Count)" -ForegroundColor Gray